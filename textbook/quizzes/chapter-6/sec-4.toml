[[questions]]

prompt = "Which of the following code print(s) `105`?"

answer = [3]

distractors = [
'''
```
#include <stdio.h>

int main() {
    int *px = NULL;
    {
        int x = 0;
        px = &x;
        for (int i = 0; i < 21; i++) {
            *px += 5;
        }
    }
    printf("%d", *px);
    
    return 0;
}
```
''',
'''
```
#include <stdio.h>

void func(int*);

int main() {
    int i = 0;
    int x = 0;
    for (; i < 10; i++) {
        x += 5;
    }
    func(&x);
    printf("%d", x);
    
    return 0;
}

void func(int *x) {
    for (; i < 21; i++) {
        *x += 5;
    } 
}
```
''',
'''
```
#include <stdio.h>

void func(int);

int x = 0;

int main() {
    int x = 0;
    for (int i = 0;i < 10; i++) {
        x += 5;
    }
    func(x);
    printf("%d", x);
    
    return 0;
}

void func(int x) {
    for (int i = 0;i < 11; i++) {
        x += 5;
    } 
}
```
''',
'''
```
#include <stdio.h>

void func(int);

int x = 0;

int main() {
    int x, y;
    {
        int x = 0;
        for (int i = 0; i < 21; i++) {
            x += 5;
        }
        y = x;
    }
    x = y;
    printf("%d", x);
    
    return 0;
}
```
'''
]

explainations = [
    "A is incorrect. The variable `x` is defined in the scope of the block, so it is not accessible outside of the block. Even if the pointer `px` is pointing to the address of `x`, the space of `x` is dellocated, so accessing the value of `x` will lead to undefined behavior.",
    "B is incorrect. The variable `i` is not defined in the scope of `func`, so the code will not compile.",
    "C is incorrect. Although the variable `x` is defined in the global scope, in `func` the variable `x`'s scope is overriden by the parameter `x`. Therefore, the global variable `x` is not modified. The output is `50`.",
    "D is correct. After the loop, the inner `x` is assigned to `y`, whose scope is the same as the outer `x`. Therefore, the inner `x` value is assigned to the outer `x`. The output is `105`."
]
