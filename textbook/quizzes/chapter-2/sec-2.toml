[question-0]

prompt = "`int`, `short`, `long`, `long long`, `float`, `double` are most commonly used number data types in C. Which of the following is correct about the byte size of these data types?"

answer = [1]

distractors = ["`int` is 2 bytes, `short` is 4 bytes, `long` is 8 bytes, `long long` is 16 bytes, `float` is 4 bytes, `double` is 8 bytes", "`int` is 4 bytes, `short` is 2 bytes, `long` is 8 bytes, `long long` is 8 bytes, `float` is 4 bytes, `double` is 8 bytes", "`int` is 4 bytes, `short` is 2 bytes, `long` is 8 bytes, `long long` is 16 bytes, `float` is 8 bytes, `double` is 16 bytes", "`int` is 4 bytes, `short` is 2 bytes, `long` is 8 bytes, `long long` is 8 bytes, `float` is 2 bytes, `double` is 4 bytes"]

explainations = [
"""
A  is incorrect. `int` uses 32 bits (4 bytes), `short` uses 16 bits (2 bytes), `long` uses 64 bits (8 bytes), `long long` uses 64 bits (8 bytes), `float` uses 32 bits (4 bytes), `double` uses 64 bits (8 bytes).
""",
"""
B is correct. `int` uses 32 bits (4 bytes), `short` uses 16 bits (2 bytes), `long` uses 64 bits (8 bytes), `long long` uses 64 bits (8 bytes), `float` uses 32 bits (4 bytes), `double` uses 64 bits (8 bytes).
""",
"""
C is incorrect. `int` uses 32 bits (4 bytes), `short` uses 16 bits (2 bytes), `long` uses 64 bits (8 bytes), `long long` uses 64 bits (8 bytes), `float` uses 32 bits (4 bytes), `double` uses 64 bits (8 bytes).
""",
"""
D is incorrect. `int` uses 32 bits (4 bytes), `short` uses 16 bits (2 bytes), `long` uses 64 bits (8 bytes), `long long` uses 64 bits (8 bytes), `float` uses 32 bits (4 bytes), `double` uses 64 bits (8 bytes).
"""
]


[question-1]

prompt = "Let's say you want to design a new number type for integer number, called `myint`. You want to use 12 bits to represent an integer. Which of the following range is correct for the new number type?"

answer = [0]

distractors = [
    "`myint` can represent numbers from -2048 to 2047, `unsigned myint` can represent numbers from 0 to 4095",
    "`myint` can represent numbers from -2048 to 2047, `unsigned myint` can represent numbers from 0 to 2047",
    "`myint` can represent numbers from -1024 to 1023, `unsigned myint` can represent numbers from 0 to 2047",
    "`myint` can represent numbers from -1024 to 1023, `unsigned myint` can represent numbers from 0 to 1023"
]

explainations = [
    "A is correct. Since we are using 12 bits to represent an integer, the range of `myint` is from -2^11 to 2^11 - 1, one sign bit is used to indicate whether it is positive or negtive. The range of `unsigned myint` is from 0 to 2^12, as the sign bit is not used.",
    "B is incorrect. Since we are using 12 bits to represent an integer, the range of `myint` is from -2^11 to 2^11 - 1, one sign bit is used to indicate whether it is positive or negtive. The range of `unsigned myint` is from 0 to 2^12, as the sign bit is not used.",
    "C is incorrect. Since we are using 12 bits to represent an integer, the range of `myint` is from -2^11 to 2^11 - 1, one sign bit is used to indicate whether it is positive or negtive. The range of `unsigned myint` is from 0 to 2^12, as the sign bit is not used.",
    "D is incorrect. Since we are using 12 bits to represent an integer, the range of `myint` is from -2^11 to 2^11 - 1, one sign bit is used to indicate whether it is positive or negtive. The range of `unsigned myint` is from 0 to 2^12, as the sign bit is not used."
]

[question-2]

prompt = "Which of the following can print `The course number is APS105.`?"

answer = [0, 2, 3]

distractors = [
"""
printf("The course number is %c%c%c%c%c%c.\n", 'A', 'P', 'S', '1', '0', '5');
""",
"""
printf("The course number is %c%c%c%d%d%d.\n", 'A', 'P', 'S', '1', '0', '5');
""",
"""
printf("The course number is %c%c%c%c%c%c.\n", 'A', 'P', 'S', 49, 48, 53);
""",
"""
printf("The course number is %c%c%c%c%c%c.\n", 'A', 'P', 'S', '0' + 1, '0' + 0, '0' + 5);
"""
]

explainations = [
    "A is correct. It literally prints each character of `APS105` one by one.",
    "B is incorrect. `%d` is used to print integer, not character.",
    "C is correct. 49 is the ASCII code for `'1'`, 48 is the ASCII code for `'0'`, 53 is the ASCII code for `'5'`.",
    "D is correct. `'0' + 1` will first convert `'0'` to its ASCII code, which is 48, then add 1 to it, which gives 49, the ASCII code for `'1'`. Similarly, `'0' + 0` gives 48, the ASCII code for `'0'`, and `'0' + 5` gives 53, the ASCII code for `'5'`."
]

[question-3]

prompt = "Which of the following can check if integer `n` is positive?"

answer = [0, 1, 2, 3]

distractors = [
"""
if (n > 0) {
    printf("n is positive!");
}
""",
"""
if (n) {
    printf("n is positive!");
}
""",
"""
if (n > 0 != 0) {
    printf("n is positive!");
}
""",
"""
if (n <= 0 != 1) {
    printf("n is positive!");
}
"""
]

explainations = [
    "A is correct. The condition `n > 0` is literally checking if `n` is positive.",
    "B is correct. In C, `0` is considered as `false`, and any non-zero number is considered as `true`. Therefore, `if (n)` is checking if `n` is non-zero, which is equivalent to checking if `n` is positive.",
    "C is correct. `n > 0` is checking if `n` is positive, and `!= 0` is checking if the result of `n > 0` is non-zero. The result of `n > 0` is either `true` or `false`, which is `1` or `0` in C. Therefore, `n > 0 != 0` is checking if `n > 0` is not `false`",
    "D is correct. Similar to C option."
]